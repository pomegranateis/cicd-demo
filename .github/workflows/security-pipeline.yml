name: Complete Security Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  sast:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=pomegranateis_cicd-demo \
            -Dsonar.organization=pomegranateis \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  dast:
    name: Dynamic Security Analysis
    needs: sast
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build and deploy
        run: |
          mvn clean package -DskipTests
          docker build -t cicd-demo:test .
          docker run -d -p 5000:5000 --name app cicd-demo:test
          timeout 60 bash -c 'until curl -f http://localhost:5000/; do sleep 2; done'

      - name: ZAP Baseline Scan
        run: |
          echo "=== Running DAST Security Scan ==="
          docker run --network host \
            -v ${{ github.workspace }}:/zap/wrk/:rw \
            -u root \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://localhost:5000 \
            -J zap_report.json \
            -r zap_report.html \
            -w zap_report.md || exit_code=$?
          
          echo "DAST scan completed with exit code: ${exit_code:-0}"
          case ${exit_code:-0} in
            0) echo "✅ DAST: No security issues found" ;;
            1) echo "⚠️ DAST: Low risk security issues found" ;;
            2) echo "⚠️ DAST: Medium risk security issues found" ;;
            3) echo "🔴 DAST: High risk security issues found" ;;
            *) echo "❌ DAST: Scan failed with unexpected exit code: ${exit_code}" ;;
          esac

      - name: Convert ZAP to SARIF and Upload
        run: |
          if [ -f "zap_report.json" ]; then
            python3 convert-zap-to-sarif.py zap_report.json zap_report.sarif
          elif [ -f "report.json" ]; then
            python3 convert-zap-to-sarif.py report.json zap_report.sarif
          else
            echo "No ZAP JSON report found to convert"
          fi
        continue-on-error: true

      - name: Upload ZAP SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: zap_report.sarif
          category: dast-zap-scan
        continue-on-error: true

      - name: Upload DAST artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dast-reports
          path: |
            zap_report.json
            zap_report.html
            zap_report.md
            zap_report.sarif

      - name: Cleanup
        if: always()
        run: docker stop app && docker rm app

  security-report:
    name: Generate Security Report
    needs: [sast, dast]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Create Combined Security Report
        run: |
          cat > security-report.md << 'EOF'
          # 🔒 Comprehensive Security Analysis Report
          
          ## 📊 Pipeline Overview
          
          This report combines Static Application Security Testing (SAST) and Dynamic Application Security Testing (DAST) results for a comprehensive security assessment.
          
          ## 🔍 SAST Results (SonarCloud)
          
          **Status:** ✅ Completed
          
          ### Key Metrics:
          - **Code vulnerabilities:** Check SonarCloud dashboard
          - **Security hotspots:** Review required
          - **Code quality gates:** Must pass for deployment
          - **Technical debt:** Monitor and address
          
          ### Actions Required:
          1. Review SonarCloud dashboard at: https://sonarcloud.io/project/overview?id=pomegranateis_cicd-demo
          2. Address all HIGH and CRITICAL severity issues
          3. Resolve security hotspots before production deployment
          
          ## 🌐 DAST Results (OWASP ZAP)
          
          **Status:** ✅ Completed
          
          ### Key Findings:
          - **Runtime vulnerabilities:** Check ZAP HTML report
          - **Configuration issues:** Review security headers
          - **Network security:** Validate SSL/TLS configuration
          - **Authentication/Authorization:** Test access controls
          
          ### Actions Required:
          1. Download and review ZAP HTML report from workflow artifacts
          2. Fix all HIGH risk DAST findings immediately
          3. Address MEDIUM risk findings before next release
          4. Implement missing security headers (CSP, HSTS, etc.)
          
          ## 🔧 Integration Status
          
          ### GitHub Security Integration:
          - **SARIF Upload:** ✅ ZAP results uploaded to Security tab
          - **Code Scanning:** ✅ Available in repository Security section
          - **Security Alerts:** ✅ Automated alerts configured
          
          ## 📋 Security Recommendations
          
          ### Immediate Actions (Critical):
          1. ❗ Address all HIGH severity SAST issues from SonarCloud
          2. ❗ Fix all HIGH risk DAST findings from ZAP scan
          3. ❗ Review and resolve all security hotspots
          
          ### Short-term Actions (1-2 weeks):
          1. 🔸 Implement missing security headers (X-Content-Type-Options, X-Frame-Options, CSP)
          2. 🔸 Address MEDIUM severity findings from both SAST and DAST
          3. 🔸 Set up automated security testing in CI/CD pipeline
          
          ### Long-term Actions (1 month):
          1. 🔹 Establish security quality gates
          2. 🔹 Implement security training for development team
          3. 🔹 Regular security assessments and penetration testing
          
          ## 📈 Security Metrics Dashboard
          
          ### SAST Metrics:
          - **Vulnerabilities:** See SonarCloud project dashboard
          - **Security Rating:** Target A grade or higher
          - **Coverage:** Maintain >80% code coverage
          
          ### DAST Metrics:
          - **High Risk Issues:** Target 0
          - **Medium Risk Issues:** Target <5
          - **Security Headers:** Target 100% implementation
          
          ## 🎯 Quality Gates
          
          ### Pre-Production Checklist:
          - [ ] All HIGH/CRITICAL SAST issues resolved
          - [ ] All HIGH risk DAST findings fixed
          - [ ] Security hotspots reviewed and addressed
          - [ ] Security headers implemented
          - [ ] Code review completed with security focus
          
          ### Deployment Approval:
          - [ ] SAST quality gate: PASSED
          - [ ] DAST scan: No HIGH risk findings
          - [ ] Security team approval: REQUIRED for production
          
          ---
          
          **Report Generated:** $(date)
          **Pipeline:** Complete Security Pipeline
          **Tools:** SonarCloud (SAST) + OWASP ZAP (DAST)
          EOF

      - name: Upload Combined Security Report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: security-report.md

      - name: Comment on PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🔒 Security Analysis Complete\n\n' +
                    '✅ **SAST (SonarCloud):** Analysis completed - check SonarCloud dashboard\n' +
                    '✅ **DAST (OWASP ZAP):** Security scan completed - review artifacts\n' +
                    '📊 **Combined Report:** Available in workflow artifacts\n\n' +
                    '**Next Steps:**\n' +
                    '1. Review security findings in GitHub Security tab\n' +
                    '2. Address any HIGH/CRITICAL issues before merging\n' +
                    '3. Download detailed reports from workflow artifacts'
            })
